{
  Bachelorthesis ueber die Entwicklung einer grafischen Oberflaeche zur
  Erstellung von Workflows am ZMT (Leibniz-Zentrum fuer Marine Tropenforschung)
  Duales Studium Informatik, Hochschule Bremen
  Sophie Miessner 5046830, 2023

  Unit UEdge: In der Unit wird die Klasse der Kanten TEdge sowie das
  dazugehoerige Interface und weitere Methoden implementiert.
}
unit UEdge;

interface

uses
  VCL.TMSFNCTypes, VCL.TMSFNCUtils, VCL.TMSFNCCustomControl, Vcl.StdActnMenus,
  VCL.TMSFNCGraphics, VCL.TMSFNCGraphicsTypes, VCL.TMSFNCBloxCoreTypes,
  VCL.TMSFNCBloxCoreUtils, VCL.TMSFNCBloxCoreLine, VCL.TMSFNCBloxCorePolygon,
  VCL.TMSFNCBloxCoreTextCell, VCL.TMSFNCBloxCoreLineArrow, VCL.TMSFNCStyles,
  VCL.TMSFNCBloxCoreLinkPoint, VCL.TMSFNCBloxShapesUML, System.SysUtils,
  VCL.TMSFNCBloxCoreGroup, VCL.TMSFNCBloxUISnapGrid, VCL.TMSFNCBloxCoreBlock,
  VCL.TMSFNCBloxCoreElement, VCL.TMSFNCBloxUIRegistration, System.Variants,
  VCL.TMSFNCBloxUIRenderer, VCL.TMSFNCBloxSelector, VCL.TMSFNCBloxCoreHandle,
  VCL.TMSFNCBloxCoreBaseElement, Vcl.Graphics, Vcl.Menus, VCL.TMSFNCBloxControl,
  VCL.TMSFNCCustomScrollControl, System.Classes, UNodes;

type
  { Klassen fuer die Kanten }
  TEdge = class(TTMSFNCBloxLine, IWorkflowComponent)
  public
    constructor Create(edgeID : Integer; newNodeID: Integer);
    { Methoden aus dem Interface }
    procedure setID(newID : Integer);
    function getID : Integer;
    function QueryInterface(const IID: TGUID; out Obj): HResult; stdcall;
    function _AddRef: Integer; stdcall;
    function _Release: Integer; stdcall;
  private
    var nodeID : Integer; { ID des Knotens wo Kante herkommt }
    var nextNodeID : Integer; { ID des darauffolgenden Knotens }
  end;

implementation


constructor TEdge.Create(edgeID : Integer; newNodeID: Integer);
begin
  inherited Create;
  ID := edgeID.ToString;
  TargetArrow.Shape := asSolidArrow;
  StrokeWidth := 3;
  nodeID := newNodeID;
end;

procedure TEdge.setID(newID : Integer);
begin
  ID := newID.ToString;
end;

function TEdge.getID : Integer;
begin
  Result := ID.ToInteger();
end;

{ Weitere Interface-Funktionen, kopiert aus dem Delphi-System }
function TEdge.QueryInterface(const IID: TGUID; out Obj): HResult; stdcall;
begin
  if GetInterface(IID, Obj) then Result := 0
  else Result := E_NOINTERFACE;
end;
function TEdge._AddRef: Integer; stdcall;
begin
{$IFNDEF AUTOREFCOUNT}
  //Result := AtomicIncrement(FRefCount);
{$ELSE}
  Result := __ObjAddRef;
{$ENDIF}
end;
function TEdge._Release: Integer; stdcall;
begin
{$IFNDEF AUTOREFCOUNT}
  //Result := AtomicDecrement(FRefCount);
  if Result = 0 then
  begin
    //__MarkDestroying(Self);
    Destroy;
  end;
{$ELSE}
  Result := __ObjRelease;
{$ENDIF}
end;


end.
