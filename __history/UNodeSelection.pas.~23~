unit UNodeSelection;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, UDatabase,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, FireDAC.UI.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Phys, FireDAC.VCLUI.Wait, Data.DB,
  FireDAC.Comp.Client, FireDAC.Comp.DataSet, FireDAC.Phys.MySQL,
  FireDAC.Phys.MySQLDef;

type
  TNodeSelectionForm = class(TForm)
    ListBox1: TListBox;
    FDQuery1: TFDQuery;
    FDConnection1: TFDConnection;
    Button1: TButton;
    procedure FormCreate(Sender: TObject);
    procedure FillList(NodeClass: String);
  private
    { Private-Deklarationen }
  public
    { Public-Deklarationen }
  end;

var
  NodeSelectionForm: TNodeSelectionForm;
  Database: TNodeDatabase;

implementation


{$R *.dfm}


procedure TNodeSelectionForm.FormCreate(Sender: TObject);
begin
  Database := TNodeDatabase.Create(FDQuery1, 'wf_nodes');
  Database.fillList(ListBox1);
end;


procedure TNodeSelectionForm.FillList(NodeClass: String);
begin

  if NodeClass.Equals('TEnd') then
  begin
    ListBox1.Items.Add('Standard');
    ListBox1.Items.Add('Abbruch');
  end
  else if NodeClass.Equals('THumanDecision') then
  begin

  end
  else if NodeClass.Equals('TMashineDecision') then
  begin

  end
  else if NodeClass.Equals('THumanTask') then
  begin

  end
  else if NodeClass.Equals('TMashineTask') then
  begin

  end;

end;

end.
